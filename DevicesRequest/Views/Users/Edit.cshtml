@model DevicesRequest.Models.User

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal alert alert-info">
    <h3>
        Edit User  @Html.DisplayFor(model => model.FirstNameEn)
        @Html.DisplayFor(model => model.LastNameEn)
    </h3>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.UserId)
    @Html.HiddenFor(model => model.CreatedDate)

    <div class="form-group">
        @Html.LabelFor(model => model.FirstNameAr, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstNameAr, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.FirstNameAr, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastNameAr, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastNameAr, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.LastNameAr, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FirstNameEn, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstNameEn, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.FirstNameEn, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastNameEn, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastNameEn, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.LastNameEn, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.JobNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.JobNumber, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.JobNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LevelId, "LevelId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("LevelId", null, htmlAttributes: new { @class = "form-control", @style = "width: 50%" })
            @Html.ValidationMessageFor(model => model.LevelId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DepartmentId, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("DepartmentId", null, htmlAttributes: new { @class = "form-control", @style = "width: 50%" })
            @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PositionId, "Position", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("PositionId", null, htmlAttributes: new { @class = "form-control", @style = "width: 50%" })
            @Html.ValidationMessageFor(model => model.PositionId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RoomNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RoomNo, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.RoomNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Telephon, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Telephon, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.Telephon, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UserEmail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserEmail, new { htmlAttributes = new { @class = "form-control", @style = "width: 50%" } })
            @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Comment, new { @class = "form-control", @style = "width: 50%", row = 5 })
            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageJobNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            <label class="btn btn-success  tooltips center" data_placement="top" title="Open Id Card" style="line-height:unset ">
                <i class="fa fa-plus "></i> Upload Job Card
                <input type="file" id="btnJobNo" name="UploadFile" style="display: none;" onchange="return ValidateFileUpload()" />
            </label>
        </div>
        <div>
            <p style="color:darkgray">
                The attachment file must be following Format<br /> <strong>"gif - png - jpeg - jpg - pdf"</strong>
            </p>
        </div>

        <div class="col-md-offset-4">
            @if (Model.ImageJobNo == null)
            {
                <img style=" height: 120px;" src="images/noimg.jpg" id="blah">
            }
            else
            {
                <img style=" height: 120px;" src="~/JobCards/@Model.ImageJobNo" id="blah">
            }

        </div>

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink(" ", "Index", new { id = 0 }, new { @class = "btn btn-default btn-sm fa fa-angle-double-left tooltips", data_placement = "top", title = "Back", @style = "line-height: unset" })
</div>

<script type="text/javascript">
    function ValidateFileUpload() {
        var fuData = document.getElementById('btnJobNo');
        var FileUploadPath = fuData.value;

        //To check if user upload any file
        if (FileUploadPath == '') {
            alert("Please upload an image");

        } if (fuData.files[0].size > 1048576)  // validation according to file size
        {
            alert("Photo only allows size 1MB");
            return false;
        }
        else {

            var Extension = FileUploadPath.substring(
                FileUploadPath.lastIndexOf('.') + 1).toLowerCase();

            //The file uploaded is an image

            if (Extension == "gif" || Extension == "png" || Extension == "bmp"
                || Extension == "jpeg" || Extension == "jpg" || Extension == "pdf") {

                // To Display
                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#blah').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(fuData.files[0]);
                }

            }
            //The file upload is NOT an image
            else {
                alert("Photo only allows file types of GIF, PNG, JPG, JPEG and BMP. ");
            }
        }

    }
</script>
